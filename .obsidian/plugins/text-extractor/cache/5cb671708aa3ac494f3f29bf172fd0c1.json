{"path":"iCloudDrive/bks/Combinatorics/Combinatorics/Graph Theory (Connectivity) - Po-Shen Loh - MOP (Green) 2010.pdf","text":"Graph theory: connectivity Po-Shen Loh 24 June 2010 1 Warm-up 1. Is the graph of the function f (x) = x sin 1 x connected?. 2. Every connected graph with all degrees even has an Eulerian circuit, which is a walk through the graph which traverses every edge exactly once before returning to the starting point. Solution: Start walking from a vertex v1 without repeating any edges, and observe that by the parity condition, the walk can only get stuck at v1, so we get one cycle. If we still have more edges left to hit, connectivity implies that some vertex v2 on our current walk is adjacent to an unused edge, so start the process again from v2. Splice the two walks together at v2, and repeat until done. 2 Classical results 1. A graph is connected if there are paths connecting every pair of vertices. The connected component containing a given vertex v is deﬁned to be the set of all vertices (including v) which have a path to v. Prove that the set of all distinct connected components (over all vertices) is a disjoint partition of the vertices in the graph. Solution: Show that connected components are either equal or disjoint; this is enough. 2. A cycle in a graph is a sequence of vertices v1, . . . , vt such that each pair of consecutive vertices is an edge, and v1vt is an edge. A tree is formally deﬁned as a connected graph with no cycles. A leaf in a tree is a vertex with degree exactly 1. Given an arbitrary tree T , show that it can be constructed by starting with a single vertex, and adding one new leaf at a time. Speciﬁcally, show that there is a sequence T1, T2, . . . , Tn such that T1 is a single vertex, each Ti+1 is Ti plus a leaf, and Tn = T . Solution: First show that every tree contains a leaf. If all vertices had degree ≥ 2, then we could take a walk around the graph (with the rule that we are not allowed to go back over the edge that we took in the previous step), and then we will eventually intersect our path again. This forms a cycle. Now to get the construction, note that since every tree has a leaf, we can “destruct” any tree by pulling oﬀ a leaf. Reversing these steps gives a construction. 3. Every connected graph contains a spanning tree. This is a subgraph which is a tree, that includes all of the original vertices. Solution: Keep deleting one edge from a remaining cycle until all cycles are gone. This cannot hurt connectedness, so we end up with a tree. Alternatively, consider the breadth-ﬁrst-search or depth-ﬁrst- search. 4. A connected n-vertex graph is a tree if and only if it has exactly n − 1 edges. Solution: Forward implication follows from the construction of a tree by adding one leaf at a time. Reverse implication follows by considering a spanning tree inside the connected graph, and noting that it already consumes all of the edges. 1 5. Let T be an n-vertex tree with all degrees at most 3. Show that there is an edge whose deletion breaks T into two trees, each of which contains at least n−1 3 vertices. Solution: Suppose this is false. Find the edge uv whose deletion maximizes the size of the smaller half. So one half has size at most n−2 3 = n 3 − 2 3 , and the other half has size at least 2n+2 3 . Suppose the smaller half is the one containing u, and the larger contains v. If v has degree 2, then we could increase the size of the smaller half simply by moving the cut edge one step in the direction of v, contradicting maximality. Otherwise, v has degree 3. But then there are at least 2n−1 3 vertices (not counting v) in the direction past v. These are split into the two subtrees (v’s children). So one of the subtrees has at least 2n−1 6 = n 3 − 1 6 vertices, again contradicting maximality. There are some details to check, such as the shifting by one changing which side is larger, or the subtree possibly becoming the larger half, but these can be resolved. 6. (Hall’s Theorem.) Consider a bipartite graph G = (V, E) with partition V = A ∪ B. A matching is a collection of edges which have no endpoints in common. We say that A has a perfect matching to B if there is a matching which hits every vertex in A. For any set S ⊂ A, let N (S) denote the set of vertices (necessarily in B) which are adjacent to at least one vertex in S. Hall’s theorem states that A has a perfect matching to B if and only if |N (S)| ≥ |S| for every S ⊂ A. 3 Problems 1. (Romania, 2006.) Each edge of a polyhedron is oriented with an arrow such that every vertex has at least one edge directed toward it, and at least one edge directed away from it. Show that some face of the polyhedron has its boundary edges coherently oriented in a circular direction. Solution: A directed cycle in the graph exists by simply following out-edges until we repeat vertices. Take a shortest directed cycle. If this is not a face, then it has a chord. Yet no matter which way the chord is oriented, one of the two sub-cycles will be strictly shorter, and still be coherent. 2. (MOP Test 2008/8/1.) Prove that if the edges of a complete graph on n vertices are colored such that no color is assigned to more than n − 2 edges, there must contain a 3-cycle in which each edge is a distinct color. Solution: (Written by David B. Rush) Like dude ok try for a contradiction. Consider a monochro- matic connected component of a color, say, yellow to a be a connected component for which there exists a yellow path from each vertex to any other. Now consider the BIGGEST one. If there exists a vertex outside, note that the edges from this vertex to any vertex in the maximal monochromatic connected component must all be the same color, contradicting maximality. Hence the monochromatic thing is the WHOLE GRAPH. Take a monochromatic spanning tree. It has at least n-1 edges. 7/0.9 :) 3. (Hefetz, Krivelevich, Stojakovi´c, Szab´o.) Let d be a positive integer, and let G be a graph with all degrees at least d. Maker and Breaker play the following game on the edges of G. Players alternate turns, claiming exactly one edge on each move, with Breaker having the ﬁrst turn. The game ﬁnishes when all edges have been claimed. Maker wins if the game ends in such a way that at every vertex, he has claimed at least ⌊ d 4 ⌋ of the incident edges. Does one of the players have a winning strategy? What if Maker is required to claim strictly more than d 2 of the incident edges? Bonus: Can you prove anything about something in between? Solution: In the ﬁrst setting, Maker ﬁrst sets up an Eulerian orientation of the graph plus one vertex z who sees all odd-degree vertices. Consider an original vertex v. In the new graph, it has exactly half of its edges directed away from v, and half directed toward v. So, in the original graph, 2 the number of its edges directed away from v is at least ⌊ d 2 ⌋ . Now forget about v and its edges, and just use the above fact. Maker’s strategy is that after Breaker takes an edge oriented −→vw, he tries to claim an edge also coming out of v. (If there is no such edge left, he moves arbitrarily.) Then, after the end of the game, if there were k ≥ ⌊ d 2 ⌋ out-edges from v, then Maker must have taken at least ⌊ k 2 ⌋ of them. Therefore, Maker can claim at least ⌊ 1 2 ⌊ d 2 ⌋⌋ ≥ ⌊ d 4 ⌋ edges at each vertex. The upper bound, follows from the fact that the total number of edges claimed by Maker is always at most half of the original. 4. (BAMO 2005/4) There are 1000 cities in the country of Euleria, and some pairs of cities are linked by dirt roads. It is possible to get from any city to any other city by traveling along these roads. Prove that the government of Euleria may pave some of the roads so that every city will have an odd number of paved roads leading out of it. Solution: The key is that 1000 is even. Reduce to the case when the graph is a spanning tree. (One can do breadth-ﬁrst-search, for example.) Take a leaf and its parent v, and pave the edge between them. Delete both vertices, and let the connected components of the remainder be C1, . . . , Ck. Note that since we only deleted 2 vertices, the sum of all remaining component sizes is still even, so the number of odd components is even. We are going to induct into each component, but for this we need all components to be even. For each odd component, add back a copy of v with an edge in the same place it used to be, so that now it is an even graph (but indeed still smaller than the original graph, by at least 1 vertex). Inductively solve every component, and observe that the artiﬁcial v’s get odd numbers of paved edges an even number of times, since there was an even number of odd components. So still the ﬁnal v gets an odd number of paved edges because of the inital paving. 5. (St. Petersburg 1996/4) In a group of several people, some are acquainted with each other and some are not. Every evening, one person invites all of his acquaintances to a party and introduces them to each other. Suppose that after each person has arranged at least one party, some two people are still unacquainted. Prove that they will not be introduced at the next party. Solution: We prove the stronger statement that at the end of this process, all connected components are cliques. For this, it suﬃces to show that if the initial graph was connected, then the ﬁnal graph is a clique. Use induction: let v be the last guy, and let G ′ be the acquaintance graph right before his party. Then G′ − v is a disjoint union of cliques, and each clique is connected back to v. So when v holds his party, everything connects into a big clique. 6. (Iran team selection test, 2006/12.) Let P be a simple polygon (i.e., it does not intersect itself, but is not necessarily convex). Show that P has an endpoint-to-endpoint chord lying completely inside P , which divides the perimeter into two parts, each of which contains at least n 3 − 1 vertices. (Do not count the vertices which are endpoints of the cord.) Solution: Triangulate the polygon by repeatedly pulling oﬀ a vertex at which there is an acute angle, and cutting at its two neighbors. Create a graph which has one vertex corresponding to each triangle. This is a tree by construction, and has degrees bounded by 3. It has n − 2 vertices. By a previous exercise, there is a way to cut an edge of this tree so that each side has at least n 3 − 1 vertices. But a cut corresponds to a vertex-to-vertex chord, and the number of vertices on each side of the chord is exactly the number of vertices in the corresponding trees. 7. (Classical.) Show that every k-regular bipartite graph can have its edges partitioned into k edge-disjoint perfect matchings. Solution: Suﬃces to ﬁnd one perfect matching. Every set S expands because it has k edges out, and each vertex on the other side can only absorb up to k of them in. 3 8. (Petersen, 1891.) A 2-factor of a graph is a 2-regular spanning subgraph (i.e., containing all vertices, and having all degrees equal to 2). For every positive integer k, show that every 2k-regular graph can be partitioned into k edge-disjoint 2-factors. Solution: Suﬃces to ﬁnd one 2-factor. Take an Eulerian orientation. Split each vertex v into v+, v−. This gives a bipartite graph with twice as many vertices. If there was an edge −→vw, now put it from v− to w+. It is a k-regular bipartite graph, so it has a perfect matching by above. Collapsing back the v+, v−, we get a 2-factor. 9. (Romanian Master of Mathematics, 2010/5.) Let n be a given positive integer. Say that a set K of points with integer coordinates in the plane is connected if for every pair of points R, S ∈ K, there exist a positive integer ℓ and a sequence R = T0, T1, . . . , Tℓ = S of points in K, where each Ti is distance 1 away from Ti+1. For such a set K, we deﬁne the set of vectors ∆(K) = { −→ RS | R, S ∈ K}. What is the maximum value of |∆(K)| over all connected sets K of 2n+1 points with integer coordinates in the plane? Solution: It is achieved by an L-shape, which gets n2 + 4n + 1. To see this is optimal, take a spanning tree of the graph of the point set, where edges connect points at unit distance. Observe that parallelograms give repeated distances. 10. (Iran team selection test, 2006/6.) A tournament is an orientation of the edges of a complete graph (so every pair of vertices has exactly one edge connecting, but in only one of the two possible directions.) Given a tournament with all edges colored either red or blue, prove that there exists a vertex v such that every other vertex u is reachable from v via a monochromatic directed path. Solution: (From Mathlinks.) We’ll prove it by induction. Show that it is true for n = 3 vertices (trivial) and assume it is true for n − 1. We’ll say that a point that satisﬁes the given condition is a ’powerful point’. Take G a graph with n vertices. Suppose it has no powerful point. For any vertex v, the subgraph G − v has n − 1 vertices and thus has a powerful point. Then there’s a powerful point for G − v1, for G − v2, . . . , for G − vn. If two of these were the same, this vertex would be a powerful point for G. So they must all be distinct. Thus each vertex has monochromatic paths to exactly n − 2 other vertices; for each vertex v, let f (v) be the vertex it doesn’t reach. Consider the sequence v, f (v), f (f (v)), . . .. Eventually some vertex must appear twice. Consider the ﬁrst time this happens. If this vertex is not v itself, then it must have two distinct ’ancestors’ (points that don’t reach it), which is absurd (since each vertex has exactly one other vertex that doesn’t reach it). Then the ﬁrst vertex to appear again must be v, and we must have a cycle. However, if the cycle contains fewer than n vertices, then there must be a powerful point in this subgraph, which contradicts the fact that each vertex can’t reach the next one in the cycle. Thus the cycle has n vertices, that is, it is the whole graph. So order the vertices according to their position in the cycle as v1, v2, . . . , vn, where f (vi) = vi+1. Now we will draw more edges than there originally were. If there’s a red path from v to u, draw the red edge −→vu; the same goes for blue paths (of course, if the path from v to u is just the edge vu, we don’t draw it again). Is it possible for two vertices v, u to have both a blue edge −→vu and a red edge −→vu? No, because then v would reach all the points that u reaches, and in particular v would reach f (v), absurd. It is easy to see, then, that each two vertices v, u are joined by two edges −→vu, −→uv, each of which can be red or blue, unless u = f (v) or vice-versa. Now, for each vertex v, consider the number of red edges −→vx. Clearly it is at most n − 2 and at least 0. So there must be two vertices with the same number of red edges v, u. Now, if −→vu is red, then v has at least as many red edges as u does; in particular, for u to have the same number of red edges, −→uv must be red too. It follows that vu, uv are either both red or both blue. Assume that they’re both red (the other case is analogous). Now take f (v), f (u). If vf (u) was red, then there would be a red 4 path uvf (u) from u to f (u), absurd. Then vf (u) is blue. Analogously uf (v) is blue too. Now, if f (v)v were blue, then there would be a blue path uf (v)v, from u to v; then there would be a blue uv edge too, absurd. So f (v)v, f (u)u are red. Finally, if f (v)f (u) were blue, then there would be a blue path uf (v)f (u) from u to f (u), absurd. So f (v)f (u), f (u)f (v) are red. By induction, f (f (u)), f (f (v)) are joined by red edges too, and so on. It follows, also, that f (f (v))f (v) is red, and so on; by induction, vi+1vi is red for all i. But then we can go from any vertex to any other vertex through a red path on the cycle! 11. (Japan, 2004/5.) In a land, every town is adjacent by road to exactly 3 other towns. Last year we made a trip starting from a town and returning to the same town after visiting every other town exactly once. This year we would like to make a trip with the same property, but we do not want to repeat the same trip, or to retrace the order in reverse. Prove that this is possible. 5","libVersion":"0.3.1","langs":""}