{"path":"iCloudDrive/bks/Combinatorics/Combinatorics/catalan.pdf","text":"Catalan Numbers Tom Davis tomrdavis@earthlink.net http://www.geometer.org/mathcircles November 26, 2006 We begin with a set of problems that will be shown to be completely equivalent. The solution to each problem is the same sequence of numbers called the Catalan numbers. Later in the document we will derive relationships and explicit formulas for the Catalan numbers in many different ways. 1 Problems 1.1 Balanced Parentheses Suppose you have n pairs of parentheses and you would like to form valid groupings of them, where “valid” means that each open parenthesis has a matching closed parenthesis. For example, “(()())” is valid, but “())()(” is not. How many groupings are there for each value of n? Perhaps a more precise deﬁnition of the problem would be this: A string of parentheses is valid if there are an equal number of open and closed parentheses and if you begin at the left as you move to the right, add 1 each time you pass an open and subtract 1 each time you pass a closed parenthesis, then the sum is always non-negative. Table 1 shows the possible groupings for 0 ≤ n ≤ 5. 1.2 Mountain Ranges How many “mountain ranges” can you form with n upstrokes and n downstrokes that all stay above the original line? If, as in the case above, we consider there to be a single mountain range with zero strokes, Table 2 gives a list of the possibilities for 0 ≤ n ≤ 3: 1.4 Polygon Triangulation If you count the number of ways to triangulate a regular polygon with n + 2 sides, you also obtain the Catalan numbers. Figure 2 illustrates the triangulations for polygons having 3, 4, 5 and 6 sides. Figure 2: Polygon Triangulations As you can see, there are 1, 2, 5, and 14 ways to do this. The “2-sided polygon” can also be triangulated in exactly 1 way, so the case where n = 0 also matches. 1.5 Hands Across a Table If 2n people are seated around a circular table, in how many ways can all of them be simultaneously shaking hands with another person at the table in such a way that none of the arms cross each other? Figure 3 illustrates the arrangements for 2, 4, 6 and 8 people. Again, there are 1, 2, 5 and 14 ways to do this. Figure 3: Hands Across the Table 3 1.6 Binary Trees The Catalan numbers also count the number of rooted binary trees with n internal nodes. Illustrated in Figure 4 are the trees corresponding to 0 ≤ n ≤ 3. There are 1, 1, 2, and 5 of them. Try to draw the 14 trees with n = 4 internal nodes. A rooted binary tree is an arrangement of points (nodes) and lines connecting them where there is a special node (the root) and as you descend from the root, there are either two lines going down or zero. Internal nodes are the ones that connect to two nodes below. b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b Figure 4: Binary Trees 1.7 Plane Rooted Trees A plane rooted tree is just like the binary tree above, except that a node can have any number of sub-nodes; not just two. Figure 5 shows a list of the plane rooted trees with n edges, for 0 ≤ n ≤ 3. Try to draw the 14 trees with n = 4 edges. 0 Edges: b 1 Edge: b 2 Edges: b b b b b 3 Edges: b b b b b b b b b b b b b b b b b b b b Figure 5: Plane Rooted Trees 1.8 Skew Polyominos A polyomino is a set of squares connected by their edges. A skew polyomino is a polyomino such that every vertical and horizontal line hits a connected set of squares and such that the successive 4 closed parentheses, and then replace the dots with open parentheses. For example, if we wish to convert (a·(((b·c)·d)·e)), ﬁrst erase everything but the dots and closed parentheses: ··)·)·)). Then replace the dots with open parentheses to obtain: (()()()). The examples in Table 4 are arranged in exactly the same order as the entries in Table 1 with the correspondence described in the previous paragraph. Try to convert a few yourself in both directions to make certain you understand the relationships. 2 A Recursive Deﬁnition The examples above all seem to generate the same sequence of numbers. In fact it is obvious that some are equivalent: parentheses, mountain ranges and diagonal-avoiding paths, for example. Later on, we will prove that the other seqences are also the same. Once we're convinced that they are the same, we only need to have a formula that counts any one of them and the same formula will count them all. If you have no idea how to begin with a counting problem like this, one good approach is to write down a formula that relates the count for a given n to previously-obtained counts. It is usually easy to count the conﬁgurations for n = 0, n = 1, and n = 2 directly, and from there, you can count more complex versions. In this section, we'll use the example with balanced parenth eses discussed and illustrated in Section 1.1. Let us assume that we already have the counts for 0, 1, 2, 3, · · · , n − 1 pairs and we would like to obtain the count for n pairs. Let Ci be the number of conﬁgurations of i matching pairs of parentheses, so C0 = 1, C1 = 1, C2 = 2, C3 = 5, and C4 = 14, which can be obtained by direct counts. We know that in any balanced set, the ﬁrst character has to be “(”. We also know that somewhere in the set is the matching “)” for that opening one. In between that pair of parentheses is a balanced set of parentheses, and to the right of it is another balanced set: (A)B, where A is a balanced set of parentheses and so is B. Both A and B can contain up to n − 1 pairs of parentheses, but if A contains k pairs, then B contains n − k − 1 pairs. Notice that we will allow either A or B to contain zero pairs, and that there is exactly one way to do so: don't write down any parentheses. Thus we can count all the conﬁgurations where A has 0 pairs and B has n − 1 pairs, where A has 1 pair and B has n − 2 pairs, and so on. Add them up, and we get the total number of conﬁgurations with n balanced pairs. Here are the formulas. It is a good idea to try plugging in the numbers you know to make certain that you haven't made a silly error. In this case, the formula for C3 indicates that it should be equal to C3 = 2 · 1 + 1 · 1 + 1 · 2 = 5. C1 = C0C0 (1) C2 = C1C0 + C0C1 (2) C3 = C2C0 + C1C1 + C0C2 (3) C4 = C3C0 + C2C1 + C1C2 + C0C3 (4) . . . . . . 6 Cn = Cn−1C0 + Cn−2C1 + · · · + C1Cn−2 + C0Cn−1 (5) Beginning in the next section, we will be able to use these recursive formulas to show that the counts of other conﬁgurations (triangulations of polygons, rooted binary trees, rooted tress, et cetera) satisfy the same formulas and thus must generate the same sequence of numbers. But simply by using the formulas above and a bit of arithmetic, it is easy to obtain the ﬁrst few Catalan numbers: 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, . . . 2.1 Counting Polygon Triangulations It is not hard to see that the polygon triangulations discussed in section 1.4 can be counted in much the same way as the balanced parentheses. See Figure 6. Figure 6: Octagon Triangulations In the ﬁgure we consider the octagon, but it should be clear that the same argument applies to any convex polygon. Consider the horizontal line at the top of the polygon. After triangulation, it will be part of exactly one triangle, and in this case, there are exactly six possible triangles of which it can be a part. In each case, once that triangle is selected, there is a polygon (possibly empty) on the right and the left of the original triangle that must itself be triangulated. What we would like to show is that a convex polygon with n > 3 sides can be triangulated in Cn−2 ways. Thus the octagon should have C8−2 = C6 triangulations. For the example in the upper left of Figure 6, the triangle leaves a 7-sided ﬁgure on the left and an empty ﬁgure (essentially a two-sided polygon) on the right. This triangulation can be completed by triangulating both sides; the one on the left can be done in C5 ways and the empty one on the right, C0 ways, for a total of C5 ·C0. The middle example on the top leaves a pentagon and a triangle that, in total, can be trianguated in C4 · C1 ways. Similar arguments can be made for all six positions of the triangle containing the top line, so we conclude that: C6 = C5 · C0 + C4 · C1 + C3 · C2 + C2 · C3 + C1 · C4 + C0 · C5, which is exactly how the Catalan numbers are deﬁned for the nested parentheses. Convince yourself that a similar argument can be made for any size original convex polygon. 7 2.2 Counting Non-Crossing Handshakes To count the number of hand-shakes discussed in Section 1.5 we can use an analysis similar to that used in section 2.1. If there are 2n people at the table pick any particular person, and that person will shake hands with somebody. To admit a legal pattern, that person will have to leave an even number of people on each side of the person with whom he shakes hands. Of the remaining n − 1 pairs of people, he can leave zero on the right and n − 1 pairs on the left, 1 on the right and n − 2 on the left, and so on. The pairs left on the right and left can independently choose any of the possible non-crossing handshake patterns, so again, the count Cn for n pairs of people is given by: Cn = Cn−1C0 + Cn−2C1 + · · · + C1Cn−2 + C0Cn−1, which, together with the fact that C0 = C1 = 1, is just the deﬁnition of the Catalan numbers. 2.3 Counting Trees Counting the binary trees discussed in Section 1.6 is similar to what we've done previously. Obvi- ously there is one way to make a rooted binary tree with zero or one internal node. To work out the number of trees with n internal node, note that one of those n nodes is the root node, and then the n − 1 additional internal nodes must be distributed on the left or the right below the root node. These can be distributed as 0 on the left and n − 1 on the right, 1 on the left and n − 2 on the right, and so on, yielding exactly the same formula that we had in every previous example. To count the rooted plane trees discussed in Section 1.7 we use the same strategy. There is one example each for trees with zero and one edge, so the counts here are the same: C0 = C1 = 1. 0 Edges: b 1 Edge: b 2 Edges: b b b b b 3 Edges: b b b b b b b b b b b b b b b b b b b b 0×3: b b b b b b b b b b b b b b b b b b b b b b 1×2: b b b b b b b b b b 2×1: b b b b b b b b b b 3×0: b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b Figure 7: Plane Rooted Trees With 4 Edges Now, to count the number of plane rooted trees with n > 1 edges we again begin from the root. There is at least one edge going down (leaving us with n − 1 edges to draw). The remaining n − 1 edges can be placed below that initial edge or hooked directly to the root node to the right of that 8 edge. The n − 1 edges, as before, can be distributed to these two locations as 0 and n − 1, as 1 and n − 2, et cetera. It should be clear that the same formula deﬁning the Catalan numbers will apply to the count of rooted plane trees. In Figure 7 the table on the left dupliates the structure of trees with 3 or fewer edges and the table on the right shows how the trees with 4 edges are generated from them. 2.4 Counting Diagonal-Avoiding Paths Up to now we do not have an explicit formula for the Catalan numbers. We know that a large collection of problems all have the same answers, and we have a recursive formula for those numbers, but it would be nice to have an explicit form. Perhaps the easiest way to obtain an explicit formula for the Catalan numbers is to analyze the number of diagonal-avoiding paths discussed in Section 1.3. We will do so by counting the total number of paths through the grid and then subtract off the number of paths that hit the diagonal. 3 Counting Mountain Ranges—Method 1 A very similar argument can be made as in the previous section if we use the interpretation of the Catalan numbers based on the count of mountain ranges as described in Section 1.2. In that section, we are seeking arrangements of n up-strokes and n down-strokes that form valid mountain ranges. If we completely ignore whether the path is valid or not, we have n up-strokes that we can choose from a collection of 2n available slots. In other words, ignoring path validity, we are simply asking how many ways you can rearrange a collection of n up-strokes and n down-strokes. The answer is clearly ( 2n n ) . Now we have to subtract off the bad paths. Every bad path goes below the horizon for the ﬁrst time at some point, so from that point on, reverse all the strokes—replace up-strokes with down- strokes and vice-versa. It is clear that the new paths will all wind up 2 steps above the horizon, since they consist of n + 1 up-strokes and n − 1 down-strokes. Conversely, every path that ends two steps above the horizon must be of this form, so it corresponds to exactly one bad path. How many such bad paths are there? The same number as there are ways to choose the n + 1 up-strokes from among the 2n total strokes, or ( 2n n+1 ) . Thus the count of valid mountain ranges, or Cn, is given by exactly the same formula: Cn = ( 2n n ) − ( 2n n + 1 ) = ( 2n n ) − n In our example, this touching line seems to hit only once per complete set of 7 strokes, and we will show that this will always be the case, for any unbalanced number of up-strokes and down- strokes. We can draw our mountain range on a grid, and it's clear that th e slope of the line is 1/(2n + 1) (it goes up 1 unit in every complete cycle of the pattern of 2n + 1 strokes. But lines with slope 1/(2n + 1) can only hit lattice points every 2n + 1 units, so there is exactly one touching in each complete cycle. If you have a series of 2n + 1 strokes, you can cycle that around to 2n + 1 arrangements. For example, the arrangement //\\/\\ can be cycled to four other arrangements: /\\/\\/, \\/\\//, /\\//\\ and \\//\\/. That means the complete set of arrangements can be divided into equivalence classes of size 2n + 1, where two arrangements are equivalent if they are cycled versions of each other. If we consider the version among these 2n + 1 cycles, the only one that yields a valid mountain range is the one that begins at the low point of the 2n + 1 arrangement. Thus, to get a count of valid mountain ranges with n up-strokes and n down-strokes, we need to divide our count of 2n + 1 stroke arrangements by 2n + 1: Cn = 1 equation: af 2 + bf + c = 0, where a = z, b = −1, and c = C0. Plug into the quadratic formula and we obtain: f (z) = 1 − √","libVersion":"0.3.1","langs":""}