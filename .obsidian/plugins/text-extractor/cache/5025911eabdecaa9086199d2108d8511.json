{"path":"iCloudDrive/bks/Combinatorics/Combinatorics/Liar's Guessing Game - Carlos di Fiore - IMO 2012.pdf","text":"A report on the third problem of IMO 2012 (Carlos di Fiore) Problem 3 Let k and n be ﬁxed positive integers. In the liar’s guessing game, Amy chooses non- negative integers x and N with 0 ≤ x ≤ N . She tells Ben what N is, but not what x is. Ben may then repeatedly ask Amy whether x ∈ S for arbitrary sets S of integers. Amy will always answer with yes or no, but she might lie. The only restriction is that she can lie at most k times in a row. After he has asked as many questions as he wants, Ben must specify a set of at most n positive integers. If x is in this set he wins; otherwise, he loses. Prove that: a) If n ≥ 2k then Ben can always win. b) For suﬃciently large k there exist n ≥ 1.99k such that Ben cannot guarantee a win. Proposed by David Arthur Scenario: A tired coordination table after two nights of reading all kinds of arguments for part a in languages from Russian to Chinese. Act: A coordinator exclaimed “Why in hell they do not all think and write exactly the same!”; a more reasonable person answers “fortunately!”. Ok, I confess: the tired coordinator was me. Despite my “not very intelligent” exclamation I have always seen the diversity of ideas and mathematical thinking as one of the most interesting features of the IMO. An excellent example is Marcin Kuczma report on the sixth problem from IMO 1997 where very diﬀerent approaches from diﬀerent areas of mathematics are collected. This problem is deﬁnitely not as good as the above one in this respect, and maybe all solutions are essentially equivalent. Anyway I found it interesting to report on what I saw during the IMO. On one hand it is nice to see diﬀerent arguments for the same problem or even diﬀerent ways to describe the same idea. During coordination we found at least one really diﬀerent approach for part a (solution 3) and two for part b (solutions 6 and 7). On the other hand it helped me to understand better the problem. For instance, up to a multi- plicative constant, the right order of magnitude is n = 2k/k. More precisely, given a ﬁxed k, let f (k) denote the minimum value of n for which Ben can guarantee a victory. The problem asks for the estimates 1.99k ≤ f (k) ≤ 2k for suﬃciently large k but solutions 1 and 4 gives 2k+2 k + 2 ( k + 1 k + 2 )k+1 ≤ f (k) ≤ 2k+2−⌊log2 k⌋. Another feature of the problem is the probabilistic approach. From the nearly twelve complete solutions for part b only one managed to succeed with some random strategy for Amy, more speciﬁcally solution 7. Maybe solution 6 should also be included, but although there is some probabilistic intuition I believed it is in fact a purely combinatorial argument. Other contestants tried some random strategy for Amy but failed or dropped it and switched to the oﬃcial solution. I can not deny that the problem have some probability background which we did not detect during problem selection but I think this does not represent a clear advantage. There is big hesitation, which I share, if this “higher mathematics” is what we want to promote at IMO. Personally I do not like training camps teaching diﬃcult theorems, advanced machinery or series of problems solved by the 1 same trick with the only purpose of doing better at contests. In my opinion, it is not the aim of the IMO to create its own language nor to introduce students to our favorite theorem. But I also believed that we should not completely separate IMO problems from deeper mathematics. I think IMO2012P3 is a nice problem admitting an alternative solution harder than the oﬃcial one with deeper meanings from probability theory. The problem reduces to a simple application of Lovasz Local Lemma only after some clear understanding of the situation. I also see it as a good opportunity to get introduced to it. The problem was proposed by David Arthur from Canada. In his own words: The problem was actually written two years ago, so my memory’s a little hazy and may be unhelpful. The basic k = 1 version was inspired by a lunch conversation with a couple non- mathematical friends. I forget what exactly we discussed that led me to the problem, but I do remember it was fully formed by the end of the conversation. And it was not designed for any technique - it was just a scenario I was genuinely curious about. From there, trying to generalize to 2k was very natural. Shortly after coming up with this formulation though, I made the mistake of mentioning the problem to Jacob Tsimerman before going out with friends, and he solved it before I got back. So I never got the chance to fully solve my own problem! In terms of methodology, Jacob’s solution was the exponential potential function one, and certainly this is the technique I would have come up with too. The probabilistic approach did not occur to me at all. About the diﬃculty of the problem, before the contest I expressed several times that I thought we were going to have around 20 complete solutions. My calculations were too optimistic. Finally we have around 44 solutions for part a and 11 for part b. Only 8 contestants get a complete solution. There were also some papers on the right track, with the weights deﬁned but with powers of two or a correct λ but missing the right estimates. Personally I think that a key point in the solution was switching from 2 to λ with 1 < λ < 2. Maybe it was spoiled by the 1.99 but anyway there were students with the right idea that did not recognize the need of a better parameter. I also think that in my prediction I overestimated the organization need it to introduce the weights. Once one solved the problem is easy to forget about it but now I remember that it took a considerable eﬀort to understand what was going on before recognizing some monovariant can help. In the next sections I sketch diﬀerent approaches from students, coordinators and leaders. The problem was one of the most liked and so there were quite a lot of conversations on it. None of the solutions is mine. I just rewrite with the help of my memory what I read or was told trying to stress diﬀerent aspects of the problem. For example, I get particularly interested on the “non-interactive” strategies (solution 5). The ﬁrst solution is the oﬃcial one which is based on the proposer’s solution. Then there comes four solutions for part a. Solution 2 gives the least number of questions, at least two contestants presented this strategy. Solution 3 is from a Russian student and I tried to explain it as close as I remember, he had the completely unexpected idea (?) of solving part a with the weights for part b! Solution 4 gives the best upper bound I am aware and it was communicated to me by Canada’s Leader Jacob Tsimerman. Solution 5 answers a question raised during coordination and it was explained to me by Santiago Laplagne. Finally I present two alternative solutions for part b, both of them comes from the american team. Some general remarks. Consider an answer A ∈ {yes, no} to the question “Is x in the set S?”. We say that A is inconsistent with a number i if A = yes and i is not S, or if A = no and i is in S. Observe that an answer inconsistent with the target number x is a lie. In the solutions for part a, we will only show how Ben can determine a number y diﬀerent from x from any set with n + 1 elements. In the general case suppose that Ben has determined a set T of size m ≥ n that contains x. By performing the previous step repeatedly he can reduce T to be of size n and thus win. 2 1 Oﬃcial Solution First we present the solution by the proposers. Solution 1a. Let n = 2k, so x is in {0, 1, . . . , 2k}. Ben begins by asking repeatedly whether x is 2k. If Amy answers no k + 1 times in a row, one of these answers is truthful, and so x ̸= 2k. Otherwise Ben stops asking about 2k at the ﬁrst answer yes. He then asks, for each i = 1, . . . , k, if the binary representation of x has a 0 in the ith digit. Regardless of what the k answers are, they are all inconsistent with a certain number y ∈ {0, 1, . . . , 2k − 1}. The preceding answer yes about 2k is also inconsistent with y. Hence y ̸= x. Otherwise the last k + 1 answers are not truthful, which is impossible. Either way, Ben ﬁnds a number that is diﬀerent from x, and the claim is proved. Solution 1b. We prove that if 1 < λ < 2 and n = ⌊(2 − λ)λk+1⌋ − 1 then Ben cannot guarantee a win. To complete the proof, then it suﬃces to take λ such that 1.99 < λ < 2 and k large enough so that n = ⌊ (2 − λ)λk+1⌋ − 1 ≥ 1.99 k. Consider the following strategy for Amy. First she chooses N = n and x ∈ {0, 1, . . . , n} arbitrarily. After every answer of hers Amy determines, for each i = 0, 1, . . . , n, the number mi of consecutive answers she has given by that point that are inconsistent with i. To decide on her next answer, she then uses the quantity ϕ = n∑ i=0 λ mi. No matter what Ben’s next question is, Amy chooses the answer which minimizes ϕ. We claim that with this strategy ϕ will always stay less than λk+1. Consequently no exponent mi in ϕ will ever exceed k, hence Amy will never give more than k consecutive answers inconsistent with some i. In particular this applies to the target number x, so she will never lie more than k times in a row. Thus, given the claim, Amy’s strategy is legal. Since the strategy does not depend on x in any way, Ben can make no deductions about x, and therefore he cannot guarantee a win. It remains to show that ϕ < λk+1 at all times. Initially each mi is 0, so this condition holds in the beginning due to 1 < λ < 2 and n = ⌊ (2 − λ)λk+1⌋ − 1. Suppose that ϕ < λk+1 at some point, and Ben has just asked if x ∈ S for some set S. According as Amy answers yes or no, the new value of ϕ becomes ϕ1 = ∑ i∈S 1 + ∑ i /∈S λmi+1 or ϕ2 = ∑ i∈S λmi+1 + ∑ i /∈S 1. Since Amy chooses the option minimizing ϕ, the new ϕ will equal min(ϕ1, ϕ2). Now we have min(ϕ1, ϕ2) ≤ 1 2 (ϕ1 + ϕ2) = 1 2 ( ∑ i∈S (1 + λ mi+1) + ∑ i /∈S (λmi+1 + 1)) = 1 2 (λϕ + n + 1). Because ϕ < λk+1, the assumptions λ < 2 and n = ⌊(2 − λ)λk+1⌋ − 1 lead to min(ϕ1, ϕ2) < 1 2 (λ k+2 + (2 − λ)λk+1) = λk+1. The claim follows, which completes the solution. □ Although most of the complete solutions for part b go along the same lines it is interesting to note that some of them describe the “invariant” in slightly diﬀerent ways. In particular I remember two of them, one form Germany and the other from China. The ﬁrst one never used the symbol ∑ in his proof. He speaks about numbers changing in the following way: in each step Ben picks a subset S of them and then Amy either multiplies each number in S by λ and replaces the remaining ones by 1 or multiplies each number not in S by λ and replaces 3 the others by 1. Of course he considered the sum of such numbers but he keeps the symbols or formulas as small as possible. The second one did not even mention “changing numbers” or the “mi” at all. He just considered sums of the form: λ k|At−k ∩ At−k+1 ∩ · · · ∩ At| + λk−1|At−k+1 ∩ At−k+2 ∩ · · · ∩ At| + · · · + λ|At−1 ∩ At| + |At| where At is either the subset for which Ben asks on question t or its complement. Going back to the oﬃcial solution, it proves that for all 1 < λ < 2 we have f (k) ≥ (2 − λ)λk+1. The best choice is λ = 2(k+1) k+2 which gives f (k) ≥ 2k+2 k + 2 ( k + 1 k + 2 )k+1 ≥ 2k k + 2 . 2 Alternative solutions for part a Now we investigate other approaches for part a. There were around 50 contestants solving this part of the problem and all of them (but one!) used some form of binary division. Most of the solutions were like the oﬃcial one: binary division and some little twist. In this twist is that they diﬀer, some tried to force an answer (solution 1), others predicted them (solution 5), some reﬁned the binary division (solutions 2 and 4); some put the twist before the binary division others after. Here we present four solutions. Each one of them remarkable in some sense: minimum number of questions, best known upper bound, non-interactiveness... One unexpected point in common was that most solutions ask 2k + 1 questions. The following strategy for Ben asks only k + 3 questions, which can be shown to be the minimal number. It also shows that n = 2k it is not optimal. Solution 2. Let k ≥ 2 and n = 2k − 1. We show how Ben can remove one number from any set of 2k possibilities. Given 2k numbers, ﬁrst he labels them with distinct binary strings of length k. For each 1 ≤ i ≤ k, in the ith-question Ben ask if the ith-digit, from left to right, in the label of x is equal to 1. Without loss of generality Amy answers yes every time. On the next three questions, Ben ask if x is 000 . . . 0, 100 . . . 0 or 010 . . . 0 respectively. If Amy answers no to the ﬁrst question, then Ben discard 000 . . . 0. If Amy answers yes to the ﬁrst but no to the second then Ben discard 100 . . . 0. If she answers yes to the ﬁrst two but no to the third Ben discard 010 . . . 0. Otherwise he discard 110 . . . 0 □ Among all solutions there was one clearly diﬀerent from the rest. A contestant from Russia solved part a with the same idea used for part b!! If in part b Amy is trying to minimize some number then it is natural for Ben to try to get it as big as possible. Although natural, is not so easy to implement the idea. Here I present it like in the student’s paper, but some reﬁnement may give a better bound. Solution 3. Let n = 2k. We interpret the problem in the following way, initially there are given n + 1 natural numbers all equal to 1. In each turn Ben splits the numbers in two disjoint subsets, then Amy multiply by 2 all numbers in one of them and replace by 1 the others. Ben objective is to get a 2k+1. Deﬁne S(T ) to be the sum of the numbers in T . We prove that Ben can either create a 2k+1 or choose A and B such that 2S(A) + |B| > S(A) + S(B) and 2S(B) + |A| > S(A) + S(B). Observe that if S(A) ≥ S(B) then the ﬁrst inequality holds trivially so he only needs |A| > S(A) − S(B). If there are at least three numbers ≥ 2k−1 or two numbers 2k it is easy to get a 2k+1 so we assume the contrary. The idea is to construct A in the following way. First order all numbers in increasing order and let A be the empty set and B all numbers. Then start moving them from B to A, one by 4 one and starting with the smallest. The ﬁrst time S(A) ≥ S(B) stop. Note that by construction all numbers in B are greater or equal to all numbers in A and hence |A| ≥ 2k−1 + 1. Suppose 2r was the last number moved from B to A, then 2r + S(B) > S(A) − 2r and hence 2 r+1 > S(A) − S(B). • If 2r = 2k then |B| = 0 and 2k+1 > S(A) ≥ 2k + 1 + · · · + 1 = 2k+1 which is impossible. • If 2r = 2k−1 then |B| ≤ 1 and |A| ≥ 2k = 2r+1 > S(A) − S(B). • If 2r ≤ 2k−2 then |A| > 2k−1 ≥ 2r+1 > S(A) − S(B). In summary, Ben can keep the sum of the numbers growing until being sure to create a 2k+1. But if no 2k+1 is never created then the sum of all numbers is bounded by (n + 1)2k and hence it cannot grows forever. In this way, Ben guarantee his victory. □ Concerning the bound from above for f (k), at the problem selection I only achieved for every r > 0 the estimate f (k) ≤ 2k−r for k suﬃciently large. After the problem was selected at the jury this was my ﬁrst question to Canada’s Leader Jacob Tsimerman and he showed me the following argument giving the best bound I know. The argument is simple but it is not easy to come with it. It gives f (r + ⌊log2 r⌋ − 2) ≤ 2 r. Before proceeding to the proof we reinterpret the problem as a game with chips. It is especially helpful to visualize strategies for part a. There are k + 2 columns numbered 1, 2, . . . , k + 2 from left to right. Initially there are N chips on column 1. Ben objective is to get at least one chip into column k + 2. Every turn, Ben chooses a set S of chips and Amy responds by doing one of the following: she moves every chip in S one step to the right and return all other chips to the ﬁrst column or she moves every chip not in S one step to the right and return the others to the ﬁrst column. Solution 4. Let k = r + ⌊log2 r⌋ − 2 and n = 2r − 1. We use the chips game reinterpretation. We start with some binary division and get for each i with 1 ≤ i ≤ r at least 2r−i chips on the ith−column. On the next steps we can forget about chips coming back to the ﬁrst column, we just care about the ones moving forward. First we divide the r columns in two almost equal groups and one of them will move forward. Continuing in this way we can guarantee that after ⌊log2 r⌋ moves there is some column that have always moved to the right. Suppose it is the ith−column, after the next ⌊log2 r⌋ steps it will be in position i + ⌊log2 r⌋. But this column still have 2r−i chips, so by some binary division again, one of them can move to the right the next r − i steps. In summary, we can get a chip in column i + ⌊log2 r⌋ + r − i = k + 2. □ The ﬁnal solution for part a is interesting from a logical point of view. When I ﬁrst tried some kind of argument similar to the one in solution 6, Ilya Bogdanov (coordinator) complained that I was ﬁxing Ben’s questions. I was not taking care of a key feature of the problem: Ben decides his questions based on the answers he have already received i.e. the game is interactive. Our ﬁrst attempt was to turn every strategy into a non-interactive strategy. It is easy to see that if Ben have a strategy then there at most a ﬁnite number of diﬀerent matches between Amy and Ben and hence the idea was to construct a superstrategy collecting all possible sequences of questions of Ben in a single strategy. This does not work because Amy can answer the same question in diﬀerent ways during a game (and of course because not every interactive game have a non-interactive strategy!). Anyway the question remains if there was a non-interactive strategy for Ben: i.e. is there a ﬁxed sequence of subsets of {0, 1, . . . , 2k} such that if Ben ask for this subsets then after he have ﬁnished he can discard one element? Next morning Santiago Laplagne (coordinator) came up with the following non-interactive strategy! 5 Solution 5. Let n = 2k. Amy chooses a number from {0, 1, . . . , 2k} and Ben is trying to discard one. We are going to give a strategy for Ben consisting of a sequence of (k + 1)2k ﬁxed questions. Deﬁne Si to be the subset of S = {0, 1, . . . , 2k − 1} of numbers such that their ith−binary digit equals 0. We consider i (mod k), the ith−question is going to be “Is x in the set Si?”. Suppose Amy answers in the same way to question i and question i + k. By the usual binary division there is a number from S, not consistent with none of the answers i, i + 1, . . . , i + k and hence Ben will be able to discard one. If Amy wants to prevent Ben removing numbers then she is forced to answer question i diﬀerently from question i + k. Hence all her answers are determined after the ﬁrst k questions. In the above, the number 2k have no inﬂuence at all. For each i, the question “Is x in the set Si?” can be replaced by “Is x in the set Si ∪ 2k?” and the preceding conclusions still holds. Now we divide the questions in 2k disjoint blocks of k + 1 consecutive ones. There are 2k diﬀerent sets of answers to the ﬁrst k questions and so for each one we can pick a diﬀerent block. For each possibility of Amy ﬁrst k answers we can manage the k + 1 questions on its associated block in such a way that if this possibility ocurrs then 2k is inconsistent with the k + 1 questions in this block. In any case, Amy is going to answer some question i in the same way as some question i + k or will be force to be inconsistent k + 1 consecutive times with the number 2k. In any case, Ben will be able to discard at least one element. □ 3 Alternative solutions for part b Now we come to the second and harder part of the problem. During the contest it was solved by approximately 11 students from Bulgaria, China, Corea, Germany, Russia, Serbia, Singapur and United States of America. We have already mention that almost all of them did it along the same lines like the oﬃcial solution but there were two diﬀerent approaches. Of all solutions I read, solution 6 is my favorite. Maybe because I tried something similar but failed. First, I was not taking care of interactiveness which is solved by considering the binary decision tree. Second, I had a similar recursive estimate but I could not make it work. Here a key point is to consider the root of some characteristic polynomial and make a strong inductive hypothesis. Once one read it, everything seems natural and easy but this is just another remarkable point of the solution! Solution 6. Let n = ⌈ 1.99k⌉. We claim that for k suﬃciently large, Ben cannot guarantee his win. Suppose the contrary i.e. he has a ﬁxed decision tree of what to ask based solely on the previous questions so that every path is ﬁnite. Its a well known fact that such a tree must be ﬁnite. We are going to prove the contrary reaching a contradiction. Let am be the number of choices of answers Amy has up to question m such that no possible number is ruled out. This is equivalent to given m answers such that every block of k + 1 consecutive answers being consistent with every x with 1 ≤ x ≤ n + 1. We estimate am recursively. For m = 0, 1, . . . , k we have am = 2m since any choice at each step is valid. After this we have the recursive inequality am+1 ≥ 2am − N am−k. (1) The above because each path of length m can be continued in two ways and at most am−k of them will eliminate each x. Therefore it remains to show that the recursive inequality and the initial conditions force am to grow arbitrarily large (or at least stay positive). Let r be a positive real root of the equation N = (2 − r)rk that is between 1.999 and 2 (which exist for k suﬃciently large). We claim that bm = am/rm is strictly increasing. To show this note that since 1.99 < r < 2 then b0 < b1 < . . . < bk and rewrite (1) as rm+1bm+1 ≥ 2rmbm − N rm−kbm−k = 2rmbm − (2 − r)rmbm−k ≥ rm+1bm because 2 > r and by induction bm > bm−1 > . . . > bm−k. It follows that bm+1 > bm as desired. In particular, since b0 = 1, we have am ≥ rm > 0 and hence the binary decision tree is inﬁnite which is a contradiction. □ 6 The next one is a probabilistic solution, it shows that if Amy answers randomly then there is a positive probability that she will not loose before any ﬁxed number of questions. Formally is the same as before “the number of games of length m grows exponentially” but the argument is diﬀerent. A little clariﬁcation, in what follows we assume Ben follows a ﬁxed strategy and he keeps asking questions until he is sure to discard one element. We prove that Amy can guarantee that the length of the game is arbitrarily large. That is, for every m, Ben cannot be sure to win before asking m questions. It is standard how to deduce from this that Ben cannot guarantee his victory. Solution 7. Let n = ⌈ 1.99k⌉ . We prove that if Ben follows any strategy and Alice answers yes or no with probability 1/2 respectively then after m steps there is a positive probability that she have not loose. It follows that for each m, Ben can not guarantee his victory before the ﬁrst m questions. So, ﬁx Ben strategy and let Alice play randomly. This does not mean Ben’s questions are pre- determined; instead it means that every move is a function of his previous ones and Amy’s answers. Let E0 be the empty event and for each i ≥ 1 deﬁne Ei to be the event that for each x at least one answer from i, i + 1, . . . , i + k is not a lie. If p = 0, 999 and k is suﬃciently large then P (Ei) ≤ n + 1 2k+1 ≤ (1 − p)pk. (2) Lemma. For every 0 ≤ r ≤ k and m ≥ r + 1 we have P (Em|E0, . . . , Em−1−r) ≤ (1 − p)pr. Proof. If r = k or m = r + 1 it follows by equation (2) because Em is independent of E0, . . . , Em−1−k. Now assume m ≥ r + 2 and r < k then P (Em|E0, . . . , Em−1−r) = P (Em ∩ E0 ∩ . . . ∩ Em−1−r) P (E0 ∩ . . . ∩ Em−1−r) ≤ P (Em|E0, . . . , Em−2−r) P (Em−1−r|E0, . . . , Em−2−r) . where the last inequality is obtained dividing numerator and denumerator by P (E0 ∩ . . . ∩ Em−2−r) and ignoring one Em−1−r. Observe that the numerator is the case (m, r + 1) and the denominator is the case (m − 1 − r, 0) so by induction P (Em|E0, . . . , Em−1−r) ≤ (1 − p)pr+1 p = (1 − p)pr as desired.‡ We are interested in the case r = 0 of the lemma. It implies P (Em|E0 ∩ . . . ∩ Em−1) ≥ p and hence ﬁnally we have P (E0 ∩ . . . ∩ Em) = P (Em|E0 ∩ . . . ∩ Em−1)P (E0 ∩ . . . ∩ Em−1) ≥ pP (E0 ∩ . . . ∩ Em−1). It follows that P (E0 ∩ . . . ∩ Em) ≥ pm, which means that if Alice plays randomly then with probability at least pm she will not loose after the ﬁrst m questions. □ It is not easy to realize what makes the lemma works. The key feature of the events E1, E2, . . . is that each one is independent of the preceding ones but k +1 of them. In fact, the lemma is a particular instance of a very well known theorem in probability theory called “Lovasz Local Lemma”. Lovasz Local Lemma. Let A1, A2, . . . , Am be a series of events such that each one occurs with proba- bility at most p and is independent of all others except for at most d of them. If 4pd ≤ 1 then there is a nonzero probability that none of the events occurs. Now we can reformulate solution 7 in a more conceptual way. Consider the events E1, . . . , Em as before, then apply Lovasz Local Lemma with p = n+1 2k+1 and d = 2k. This gives that if 8k n+1 2k+1 ≤ 1 then there is a nonzero probability that Amy have not loose after the ﬁrst m questions. In particular, the above implies the estimate f (k) ≥ 2k 4k . There is a simple argument that gives an exponential lower bound for f (k). It was ﬁrst explained to me by Luis Silvestre (coordinator) but 7 at least two contestant came up with it, one from Nigeria and one from India. If n + 1 = 2 k 2 , in any sequence of k/2 consecutive questions Amy can guarantee to give at least one consistent answer with every number from {0, 1, . . . , n}. So Amy strategy is to divide Ben’s questions in blocks of k/2 consecutive ones and to give at least one consistent answer in each block for each possible number. Since any k + 1 consecutive questions contains at least one block then this shows f (k) ≥ 1.4k. 4 A ﬁnal solution for part a Finally I would like to present a reinterpretation of solutions 3 and 4 which I believe can help to understand the true nature of the function f (k). Remember that our game is equivalent to the following. Initially there are n + 1 natural numbers all equal to 1. Each turn, Ben splits them in two groups and Amy double all numbers in one group and replace by 1 the others. Ben objective is to get a 2k+1. The following lemma will be the key ingredient for our ﬁnal solution. Lemma. Any set of powers of two with sum ≥ 2k+1 contains a power ≥ 2k+1 or can be split in two subsets with sum ≥ 2k. Proof. If there are two equal powers we replace them by their sum and proceed by induction. Other- wise, the sum is at most 1 + 2 + · · · + 2k < 2k+1 which contradicts the hypothesis.‡ Solution 8. Let k = r + ⌊log2 r⌋ − 2 and n = 2r − 1. Initially Ben starts with n + 1 = 2r numbers equal to 1. By some binary division he get 2r−1 powers 20, 2r−2 powers 21, ... and 1 power 2r which sum (r + 2)2r−1 ≥ 2k+1. From here on Ben will only worry about the numbers that get doubled by Amy, i.e. in each step he can forget about the other ones. More precisely, in each step he have some powers of two with sum ≥ 2k+1. From the lemma he have already won or he can split them in two groups with sum ≥ 2k. No matter which group Amy chooses, next step the sum will still be ≥ 2k+1 but with fewer numbers. Ben keeps doing the same until there is only one number left which must be ≥ 2k+1. □ The solution above shows that Ben should try to get the sum as big as possible. Even more is true, he can get a 2k+1 if and only if he can get the sum ≥ 2k+1. If we start with n + 1 numbers equal to 1 then the solution 1 increase the sum at least to 2n + 1. Solutions 4 or 8 increase it up to n log n by some binary division. 5 Some questions and notes • The obvious question is how much can we say about the function f (k). A computer search shows that f (k) = 2, 3, 4, 7, 11, 17 for k = 1, 2, 3, 4, 5, 6. From solution 1 and 4, we learn that up to a multiplicative constant the order of magnitude is f (k) = 2k/k. More precisely 2k+2 k + 2 ( k + 1 k + 2 )k+1 ≤ f (k) ≤ 2 k+2−⌊log2 k⌋. Can we get more precise estimates? • The game experience a “transition of phase” phenomena. Suppose we ﬁx Ben’s strategy and let am be the number of possible games of lengths m. If n ≤ 2k/k + 2 then {am} grows expo- nentially (as shown by solutions 6 and 7) and if 2k+2/k ≤ n then {am} is bounded (because Ben wins). The change ocurrs in a small interval for n where we do not know who wins. It would be interesting to give values of n and k for which Amy wins but {am} does not grows exponentially. • The oﬃcial solution for part b involves an auxiliary parameter 1 < λ < 2. Is there any direct solution of part b using powers of two weights or some reﬁnement? 8 • Solution 7 shows that if Amy plays randomly then she has a positive probability of not loosing after some ﬁnite number of questions. But how does this gives her a deterministic strategy? This process is usually called “derandomization” and is explained in “The probabilistic method” by N. Alon and J. Spencer via some tenure game very similar to the Liar’s game. A good reference for Lovasz Local Lemma is the original paper by Lovasz and Erdos “Problems and results on 3-chromatic hypergraphs and some related questions” avaible in Lovasz homepage. Despite the previous references, I have no answer to the question above! • The following links solutions 1 and 7. Suppose Amy answers yes or no with probability 1/2 and deﬁne for each i = 0, . . . , n the random variable Xi with value 1 if at some moment Ben is able to discard number i and 0 otherwise. Deﬁne also Sm as the event that no number is discarded in the ﬁrst m questions. It turns out that E[X0 + · · · + Xn|Sm] is a linear rescaling of the ϕ deﬁned in the oﬃcial solution after m questions with λ = 1 2 . • Solution 5 shows that if n = 2k then Ben have a non-interactive strategy. Is this best possible? For example, is there a non-interactive strategy for Ben in the case n = 2k − 1? • In solutions 6 and 7 we proved that for every m, Ben cannot be sure to win with only m questions. It is standard how to deduce from this that Ben has no strategy. For example it can be done via Konig’s lemma: every tree with inﬁnitely many vertices, each having ﬁnite degree, has at least one inﬁnite path. In particular, it follows that if Ben is playing with his winning strategy then there are only a ﬁnite number of distinct games. 9","libVersion":"0.3.1","langs":""}